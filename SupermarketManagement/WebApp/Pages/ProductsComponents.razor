@page "/products"
@attribute [Authorize(Policy = "AdminOnly")]
@using UseCases.UseCaseInterfaces;

@inject NavigationManager navigationManager
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase


<h3>Products</h3>
<br/>

@if (products != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Product Category</th>
				<th>Product Name</th>
				<th>Price</th>
				<th>Quantity</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach(var product in products)
			{
				<tr>
					<td>@GetCategoryByIdUseCase.Execute(product.CategoryId)?.Name</td>
					<td>@product.Name</td>
					<td>@(Math.Round(product.Price))</td>
					<td>@product.Quantity</td>
					<td>
						<button type="button" class="btn btn-link" @onclick="@(() => OnClickEditProduct(product))">Edit</button>
						&nbsp;
						<button type="button" class="btn btn-link" @onclick="@(() => OnClickDeleteProduct(product.ProductId))">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
<br/>

<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>

@code {

	private IEnumerable<Product> products;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		products = ViewProductsUseCase.Execute();


	}

	private void OnClickAddProduct()
	{
		navigationManager.NavigateTo("/addproduct");
	}

	private void OnClickEditProduct(Product product)
	{
		navigationManager.NavigateTo($"/editproduct/{product.ProductId}");
	}

	private void OnClickDeleteProduct(int productId)
	{
		DeleteProductUseCase.Execute(productId);
	}
}
